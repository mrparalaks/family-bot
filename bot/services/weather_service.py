import aiohttp
import os
import time
from dotenv import load_dotenv
from datetime import datetime
from aiohttp.client_exceptions import ClientError

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()

# API-–∫–ª—é—á OpenWeather
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
if not WEATHER_API_KEY:
    raise RuntimeError(
        "‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è WEATHER_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞. "
        "–°–æ–∑–¥–∞–π .env –∏ –¥–æ–±–∞–≤—å WEATHER_API_KEY='—Ç–≤–æ–π_–∫–ª—é—á'"
    )

BASE_URL = "https://api.openweathermap.org/data/2.5"

# –ö—ç—à
__cache = {}
CACHE_TTL = 600  # 10 –º–∏–Ω—É—Ç


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

def _get_from_cache(key: tuple):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Ç—É—Ö)."""
    now = time.time()
    if key in __cache:
        ts, data = __cache[key]
        if now - ts < CACHE_TTL:
            return data
    return None


def _save_to_cache(key: tuple, data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à."""
    __cache[key] = (time.time(), data)


async def _fetch(endpoint: str, params: dict, cache_key: tuple) -> dict:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenWeather —Å –∫—ç—à–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    cached = _get_from_cache(cache_key)
    if cached:
        return cached

    url = f"{BASE_URL}/{endpoint}"
    params["appid"] = WEATHER_API_KEY

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, timeout=10) as response:
                data = await response.json()

                if response.status == 200:
                    _save_to_cache(cache_key, data)

                return data
    except ClientError as e:
        return {"cod": "500", "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"}
    except Exception as e:
        return {"cod": "500", "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}


# ---------- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

async def fetch_weather(city: str, units: str = "metric", lang: str = "ru") -> dict:
    """–ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã."""
    return await _fetch(
        "weather",
        {"q": city, "units": units, "lang": lang},
        (city.lower(), "weather")
    )


async def fetch_forecast(city: str, days: int = 3, units: str = "metric", lang: str = "ru") -> dict:
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π."""
    return await _fetch(
        "forecast",
        {"q": city, "units": units, "lang": lang, "cnt": days * 8},
        (city.lower(), f"forecast_{days}")
    )


# ---------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ----------

def format_weather(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã."""
    if str(data.get("cod")) != "200":
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {data.get('message', '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')}"

    city = data["name"]
    temp = round(data["main"]["temp"])
    feels_like = round(data["main"]["feels_like"])
    description = data["weather"][0]["description"].capitalize()

    return (
        f"üåç {city}\n"
        f"üå° {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
        f"‚òÅÔ∏è {description}"
    )


def format_forecast(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π."""
    if str(data.get("cod")) != "200":
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {data.get('message', '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')}"

    city = data["city"]["name"]
    forecast_list = data["list"]

    # –ë–µ—Ä—ë–º –∫–∞–∂–¥—ã–µ 8 –∑–∞–ø–∏—Å–µ–π (~—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)
    days = forecast_list[::8]

    if not days:
        return f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}"

    lines = [f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã: {city}"]
    for item in days:
        dt = datetime.fromtimestamp(item["dt"]).strftime("%d.%m %H:%M")
        temp = round(item["main"]["temp"])
        feels_like = round(item["main"]["feels_like"])
        description = item["weather"][0]["description"].capitalize()
        lines.append(
            f"\nüìç {dt}\n"
            f"üå° {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"‚òÅÔ∏è {description}"
        )

    return "\n".join(lines)