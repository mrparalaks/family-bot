import aiohttp
import os
import time
from dotenv import load_dotenv


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)
load_dotenv()

# API-–∫–ª—é—á OpenWeather
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

BASE_URL = "https://api.openweathermap.org/data/2.5"

__cache = {}
CACHE_TTL = 600

async def fetch_weather(city: str, units: str = "metric", lang: str = "ru") -> dict:
    """
    –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –≤ OpenWeather API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏.
    """
    cache_key = (city.lower(), "weather")
    now = time.time()

    if cache_key in __cache:
        ts, data = __cache[cache_key]
        if now - ts < CACHE_TTL:
            return data


    url = f"{BASE_URL}/weather"
    params = {
        "q": city,
        "appid": WEATHER_API_KEY,
        "units": units,
        "lang": lang
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            data = await response.json()

            if response.status == 200:
                __cache[cache_key] = (now, data)

            return data

async def fetch_forecast(city: str, days: int = 3, units: str = "metric", lang: str = "ru") -> dict:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã (–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π).
    """

    cache_key = (city.lower(), f"forecast_{days}")
    now = time.time()

    if cache_key in __cache:
        ts, data = __cache[cache_key]
        if now - ts < CACHE_TTL:
            return data

    url = f"{BASE_URL}/forecast"
    params = {
        "q": city,
        "appid": WEATHER_API_KEY,
        "units": units,
        "lang": lang,
        "cnt": days * 8
    }

    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            data = await response.json()

            if response.status == 200:
                __cache[cache_key] = (now, data)

            return data

def format_weather(data: dict) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if data.get("cod") != 200:
        return f"–û—à–∏–±–∫–∞: {data.get('message', '–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')}"

    city = data["name"]
    temp = data["main"]["temp"]
    description = data["weather"][0]["description"]
    feels_like = data["main"]["feels_like"]

    return (
        f"üåç –ì–æ—Ä–æ–¥: {city}\n"
        f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
        f"ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
        f"‚òÅÔ∏è {description.capitalize()}"
    )