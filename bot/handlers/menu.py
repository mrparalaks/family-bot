from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.services.weather_service import (
    fetch_weather,
    fetch_nextday,
    fetch_forecast,
    format_weather,
    format_nextday,
    format_forecast,
)
from bot.services.gif_service import fetch_random_gif

router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class WeatherStates(StatesGroup):
    waiting_for_city = State()

class GifStates(StatesGroup):
    waiting_for_tag = State()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@router.message(CommandStart())
async def start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", callback_data="weather")],
        [InlineKeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", callback_data="nextday")],
        [InlineKeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è", callback_data="forecast")],
        [InlineKeyboardButton(text="–ì–∏—Ñ–∫–∞ –ø–æ —Ç–µ–º–µ", callback_data="gif_tag")],
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–∞—è –≥–∏—Ñ–∫–∞", callback_data="gif_random")],
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=keyboard)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–≥–æ–¥—ã ---
@router.callback_query(F.data.in_({"weather", "nextday", "forecast"}))
async def show_city_menu(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data  # weather / nextday / forecast
    await state.update_data(action=action)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Å–∫–æ–≤", callback_data="city_–ü—Å–∫–æ–≤")],
        [InlineKeyboardButton(text="–ö–æ–ª–ø–∏–Ω–æ", callback_data="city_–ö–æ–ª–ø–∏–Ω–æ")],
        [InlineKeyboardButton(text="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="city_–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="city_other")],
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("city_"))
async def process_city(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    action = data.get("action")  # weather / nextday / forecast
    city = callback.data.split("_", 1)[1]

    if city == "other":
        await callback.message.answer("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        await state.set_state(WeatherStates.waiting_for_city)
    else:
        await send_weather(callback.message, action, city)


@router.message(WeatherStates.waiting_for_city)
async def process_custom_city(message: types.Message, state: FSMContext):
    data = await state.get_data()
    action = data.get("action")
    city = message.text
    await send_weather(message, action, city)
    await state.clear()


async def send_weather(message: types.Message, action: str, city: str):
    if action == "weather":
        data = await fetch_weather(city)
        text = format_weather(data)
    elif action == "nextday":
        data = await fetch_nextday(city)
        text = format_nextday(data)
    else:  # forecast
        data = await fetch_forecast(city, days=3)
        text = format_forecast(data)

    await message.answer(text)


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–∏—Ñ–æ–∫ ---
@router.callback_query(F.data == "gif_random")
async def send_random_gif(callback: types.CallbackQuery):
    url = await fetch_random_gif()
    if url:
        await callback.message.answer_animation(url)
    else:
        await callback.message.answer("–£–ø—Å! –ì–∏—Ñ–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "gif_tag")
async def ask_gif_tag(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º —Ç–µ–º—É –≥–∏—Ñ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: cat, smile, love)")
    await state.set_state(GifStates.waiting_for_tag)


@router.message(GifStates.waiting_for_tag)
async def send_gif_by_tag(message: types.Message, state: FSMContext):
    tag = message.text.strip()
    url = await fetch_random_gif(tag)
    await state.clear()
    if url:
        await message.answer_animation(url)
    else:
        await message.answer("–£–≤—ã, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å üò¢ –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ç–µ–≥.")